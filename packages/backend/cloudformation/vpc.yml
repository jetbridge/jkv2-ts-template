Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      Tags:
        - Key: "Name"
          Value: "#{AWS::StackName}"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: "10.0.0.0/16"

  # public subnet
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
      VpcId:
        Ref: VPC
      AvailabilityZone: "#{AWS::Region}a"
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: true
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
      VpcId:
        Ref: VPC
      AvailabilityZone: "#{AWS::Region}b"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
      VpcId:
        Ref: VPC
      AvailabilityZone: "#{AWS::Region}c"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
  PublicSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "NAT-ed"
      SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
        - Ref: PublicSubnetC

  # route public subnet to IGW
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "#{AWS::StackName} Public"
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicARouteTableAssociation: # link public subnets to PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  # internet gateway
  IGW: # Internet GateWay
    Type: AWS::EC2::InternetGateway
  IGWAttachment: # Connect IGW to our VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  # SSH for bastion
  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "#{AWS::StackName}"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: "#{AWS::StackName}-BastionSecurityGroup"
